// Code generated by MockGen. DO NOT EDIT.
// Source: domain/types.go
//
// Generated by this command:
//
//	mockgen -source=domain/types.go -destination=./domain/mock/types_mock.go -package=domain
//

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	domain "github.com/Rindrics/execute-script-with-merge/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockEventParser is a mock of EventParser interface.
type MockEventParser struct {
	ctrl     *gomock.Controller
	recorder *MockEventParserMockRecorder
}

// MockEventParserMockRecorder is the mock recorder for MockEventParser.
type MockEventParserMockRecorder struct {
	mock *MockEventParser
}

// NewMockEventParser creates a new mock instance.
func NewMockEventParser(ctrl *gomock.Controller) *MockEventParser {
	mock := &MockEventParser{ctrl: ctrl}
	mock.recorder = &MockEventParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventParser) EXPECT() *MockEventParserMockRecorder {
	return m.recorder
}

// ParseEvent mocks base method.
func (m *MockEventParser) ParseEvent() (domain.ParsedEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseEvent")
	ret0, _ := ret[0].(domain.ParsedEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseEvent indicates an expected call of ParseEvent.
func (mr *MockEventParserMockRecorder) ParseEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseEvent", reflect.TypeOf((*MockEventParser)(nil).ParseEvent))
}

// ParseExecutionDirectives mocks base method.
func (m *MockEventParser) ParseExecutionDirectives(arg0 domain.ParsedEvent, arg1 string) ([]domain.ExecutionDirective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseExecutionDirectives", arg0, arg1)
	ret0, _ := ret[0].([]domain.ExecutionDirective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseExecutionDirectives indicates an expected call of ParseExecutionDirectives.
func (mr *MockEventParserMockRecorder) ParseExecutionDirectives(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseExecutionDirectives", reflect.TypeOf((*MockEventParser)(nil).ParseExecutionDirectives), arg0, arg1)
}
